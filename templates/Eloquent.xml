<templateSet group="Eloquent">
  <template name="hasm" value="public function $NAME$()&#10;{&#10;    return $this-&gt;hasMany($CLASS_NAME$::class);&#10;}" description="Has Many Relationship" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS_NAME" expression="capitalize(NAME)" defaultValue="NAME" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="btm" value="public function $NAME$()&#10;{&#10;    return $this-&gt;belongsToMany($CLASS_NAME$::class);&#10;}" description="Belongs to Many Relationship" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS_NAME" expression="capitalize(NAME)" defaultValue="NAME" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="bt" value="public function $NAME$()&#10;{&#10;    return $this-&gt;belongsTo($CLASS_NAME$::class);&#10;}" description="Belongs to Relationship" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS_NAME" expression="capitalize(NAME)" defaultValue="NAME" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hasone" value="public function $NAME$()&#10;{&#10;    return $this-&gt;hasOne($CLASS_NAME$::class);&#10;}" description="Has One Relationship" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CLASS_NAME" expression="capitalize(NAME)" defaultValue="NAME" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>